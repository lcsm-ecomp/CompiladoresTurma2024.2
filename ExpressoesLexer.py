# Generated from Expressoes.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,82,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,3,1,3,1,4,4,4,49,8,4,11,4,12,4,50,1,5,4,5,54,8,5,11,5,12,
        5,55,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,65,8,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,0,0,15,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,1,0,6,2,0,65,90,97,122,1,0,48,57,2,0,60,60,62,62,2,0,43,
        43,45,45,2,0,42,42,47,47,2,0,10,10,32,32,85,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,3,37,1,0,0,
        0,5,40,1,0,0,0,7,45,1,0,0,0,9,48,1,0,0,0,11,53,1,0,0,0,13,57,1,0,
        0,0,15,64,1,0,0,0,17,66,1,0,0,0,19,68,1,0,0,0,21,70,1,0,0,0,23,72,
        1,0,0,0,25,74,1,0,0,0,27,76,1,0,0,0,29,78,1,0,0,0,31,32,5,112,0,
        0,32,33,5,114,0,0,33,34,5,105,0,0,34,35,5,110,0,0,35,36,5,116,0,
        0,36,2,1,0,0,0,37,38,5,105,0,0,38,39,5,102,0,0,39,4,1,0,0,0,40,41,
        5,101,0,0,41,42,5,108,0,0,42,43,5,115,0,0,43,44,5,101,0,0,44,6,1,
        0,0,0,45,46,5,59,0,0,46,8,1,0,0,0,47,49,7,0,0,0,48,47,1,0,0,0,49,
        50,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,10,1,0,0,0,52,54,7,1,0,
        0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,12,
        1,0,0,0,57,58,5,61,0,0,58,14,1,0,0,0,59,60,5,61,0,0,60,65,5,61,0,
        0,61,62,5,33,0,0,62,65,5,61,0,0,63,65,7,2,0,0,64,59,1,0,0,0,64,61,
        1,0,0,0,64,63,1,0,0,0,65,16,1,0,0,0,66,67,7,3,0,0,67,18,1,0,0,0,
        68,69,7,4,0,0,69,20,1,0,0,0,70,71,5,40,0,0,71,22,1,0,0,0,72,73,5,
        41,0,0,73,24,1,0,0,0,74,75,5,123,0,0,75,26,1,0,0,0,76,77,5,125,0,
        0,77,28,1,0,0,0,78,79,7,5,0,0,79,80,1,0,0,0,80,81,6,14,0,0,81,30,
        1,0,0,0,4,0,50,55,64,1,6,0,0
    ]

class ExpressoesLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PRINT = 1
    IF = 2
    ELSE = 3
    PV = 4
    VAR = 5
    NUM = 6
    EQ = 7
    OP1 = 8
    OP2 = 9
    OP3 = 10
    APAR = 11
    FPAR = 12
    ACHAVE = 13
    FCHAVE = 14
    BRANCO = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'if'", "'else'", "';'", "'='", "'('", "')'", "'{'", 
            "'}'" ]

    symbolicNames = [ "<INVALID>",
            "PRINT", "IF", "ELSE", "PV", "VAR", "NUM", "EQ", "OP1", "OP2", 
            "OP3", "APAR", "FPAR", "ACHAVE", "FCHAVE", "BRANCO" ]

    ruleNames = [ "PRINT", "IF", "ELSE", "PV", "VAR", "NUM", "EQ", "OP1", 
                  "OP2", "OP3", "APAR", "FPAR", "ACHAVE", "FCHAVE", "BRANCO" ]

    grammarFileName = "Expressoes.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


